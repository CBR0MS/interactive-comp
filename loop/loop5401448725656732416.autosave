// This is a template for creating a looping animation in Processing/Java. 
// When you press the 'F' key, this program will export a series of images
// into a "frames" directory located in its sketch folder. 
// These can then be combined into an animated gif. 
// Known to work with Processing 3.3.6
// Prof. Golan Levin, January 2018

//===================================================
// Global variables. 
String  myNickname = "nickname"; 
int     nFramesInLoop = 250;
int     nElapsedFrames;
boolean bRecording; 



//===================================================
void setup() {
  size (640, 640, P3D); 
  bRecording = false;
  nElapsedFrames = 0;
  frameRate(20);
}
//===================================================
void keyPressed() {
  if ((key == 'f') || (key == 'F')) {
    bRecording = true;
    nElapsedFrames = 0;
  }
}

//===================================================
void draw() {
  
 
  // Compute a percentage (0...1) representing where we are in the loop.
  float percentCompleteFraction = 0; 
  if (bRecording) {
    percentCompleteFraction = (float) nElapsedFrames / (float)nFramesInLoop;
  } else {
    percentCompleteFraction = (float) (frameCount % nFramesInLoop) / (float)nFramesInLoop;
  }

  // Render the design, based on that percentage. 
  renderMyDesign (percentCompleteFraction);

  // If we're recording the output, save the frame to a file. 
  if (bRecording) {
    saveFrame("frames/" + myNickname + "_frame_" + nf(nElapsedFrames, 4) + ".png");
    nElapsedFrames++; 
    if (nElapsedFrames >= nFramesInLoop) {
      bRecording = false;
    }
  }
}

//===================================================
void renderMyDesign (float percent) {
  //
  // YOUR ART GOES HERE.
  // This is an example of a function that renders a temporally looping design. 
  // It takes a "percent", between 0 and 1, indicating where we are in the loop. 
  // This example uses two different graphical techniques. 
  // Use or delete whatever you prefer from this example. 
  // Remember to SKETCH FIRST!

  //----------------------
  // here, I set the background and some other graphical properties
  //background (180);
  smooth(); 
  
  int roundedPercent = round(percent * 100);
  float cx = 100;
  float cy = 100;
  //background(129, 120, 148);
  
  
  if (roundedPercent >= 0 && roundedPercent <= 33){
      noStroke();
      fill(112, 88, 124);
      triangle(0, height, width, height, width/2, map(percent, 0, .33, height, height/2 ));
      fill( 57, 43, 88);
      triangle(0, 0, 0, height, width/2 * map(percent, 0, .33, 0, 1), height/2);
      fill(45, 3, 32);
      triangle(0, 0, width, 0, width/2, height/2 * map(percent, 0, .33, 0, 1));
      fill(108, 150, 157);
      triangle(width, 0, width, height, map(percent, 0, .33, width, width/2), height/2); 
  }
  
  if (roundedPercent > 35 && roundedPercent <= 66){
  
  translate(width/2, height/2, 0);
  // set to orthagonal
  ortho(-width/2, width/2, -height/2, height/2);
  
  
  float eased = function_DoubleExponentialSigmoid (map(percent, 0.33, 0.67, 0, 1), 0.7); 
  
  rotateX(PI/map(eased, 0, 1, 900, 2)); 
  //rotateZ(PI/map(percent, 0.33, 0.66, 60, 1.8)); 
  background(129, 120, 148);
  //lights();
  
  fill(45, 3, 32);
  beginShape();
  scale(map(percent, 0.33, 0.66, 3.6, 1.8), map(percent, 0.33, 0.66, 3.6, 1.8), map(percent, 0.33, 0.66, 3.6, 1.8));
  vertex(-100, -100, -100);
  vertex( 100, -100, -100);
  vertex(   0,    0,  100);
  endShape();
  fill(108, 150, 157);
  beginShape();
  vertex( 100, -100, -100);
  vertex( 100,  100, -100);
  vertex(   0,    0,  100);
  endShape();
  fill(112, 88, 124);
  beginShape();
  vertex( 100, 100, -100);
  vertex(-100, 100, -100);
  vertex(   0,   0,  100);
  endShape();
  fill( 57, 43, 88);
  
  beginShape();
  vertex(-100,  100, -100);
  vertex(-100, -100, -100);
  vertex(   0,    0,  100);
  endShape();
  
} else {
 // triangle(height/3 * 2, width/3, height/3 * 2, width/3 * 2, height/3, width/3);
  
}

/*
  //----------------------
  // If we're recording, I include some visual feedback. 
  fill (255, 0, 0);
  textAlign (CENTER); 
  String percentDisplayString = nf(percent, 1, 3);
  text (percentDisplayString, cx, cy-15); */
}



//===================================================
// Taken from https://github.com/golanlevin/Pattern_Master
float function_DoubleExponentialSigmoid (float x, float a) {
  // functionName = "Double-Exponential Sigmoid";

  float min_param_a = 0.0 + EPSILON;
  float max_param_a = 1.0 - EPSILON;
  a = constrain(a, min_param_a, max_param_a); 
  a = 1-a;

  float y = 0;
  if (x<=0.5) {
    y = (pow(2.0*x, 1.0/a))/2.0;
  } else {
    y = 1.0 - (pow(2.0*(1.0-x), 1.0/a))/2.0;
  }
  return y;
}
